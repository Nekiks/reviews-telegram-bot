from aiogram import Router, F
from aiogram import Bot
from aiogram import types
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup 
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.enums.parse_mode import ParseMode
from handlers.states.team_states import TeamCreationStates, TeamInvitingMembersStates
from handlers.states.feedback_states import AnswerFeedbackStates
from handlers.states import FeedbackStates
from datetime import date

from configs import BOT_TOKEN

from utils import get_username
from utils import check_user_team
from utils import add_feedback, del_feedback, get_user_id_feedback, get_feedback_data
from utils import get_team_by_invite_hash
from utils import notify_about_feedback
from utils import get_team_leader_id

router_feedback = Router()

@router_feedback.callback_query(F.data == 'cancel_feedback_form')
async def cancel_feedback_form(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    back_menu = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_menu')
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_menu]])
    await callback.message.edit_text('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=inline_keyboard)
    await callback.answer()


@router_feedback.callback_query(F.data == 'send_feedback')
async def process_send_feedback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.message.chat.id
    if not check_user_team(user_id) == None:
        named_btn = InlineKeyboardButton(text='–ê–Ω–æ–Ω–∏–º–Ω–æ', callback_data='send_feedback_unnamed')
        unnamed_btn = InlineKeyboardButton(text='–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ', callback_data='send_feedback_named')
        cancel_btn = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_feedback_form')
        inline_buttons = InlineKeyboardMarkup(inline_keyboard=[[named_btn, unnamed_btn], [cancel_btn]])
        await callback.message.edit_text('–ö–∞–∫ –±—É–¥–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ?', reply_markup=inline_buttons)
    else:
        create_team_btn = InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É', callback_data='create_team')
        back_menu_btn = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_menu')
        inline_buttons = InlineKeyboardMarkup(inline_keyboard=[[create_team_btn], [back_menu_btn]])
        await callback.message.edit_text('–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—â–µ–Ω–∏–µ —É –ª–∏–¥–µ—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é', reply_markup=inline_buttons)

@router_feedback.callback_query(F.data == ('send_feedback_unnamed'))
async def process_send_feedback_unnamed(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(is_anonymous = True)
    await state.set_state(FeedbackStates.waiting_for_content)
    cancel_btn = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_feedback_form')
    inline_buttons = InlineKeyboardMarkup(inline_keyboard=[[cancel_btn]])
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:', reply_markup=inline_buttons)

@router_feedback.callback_query(F.data == ('send_feedback_named'))
async def process_send_feedback_named(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(is_anonymous = False)
    await state.set_state(FeedbackStates.waiting_for_content)
    cancel_btn = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel_feedback_form')
    inline_buttons = InlineKeyboardMarkup(inline_keyboard=[[cancel_btn]])
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:', reply_markup=inline_buttons)


@router_feedback.message(FeedbackStates.waiting_for_content)
async def finish_send_feedback(message: types.Message, state: FSMContext):
    user_id = message.chat.id
    team_id = check_user_team(user_id)
    current_date = date.today()

    await state.update_data(content = message.text)
    data = await state.get_data()
    feedback_id = add_feedback(user_id, team_id, current_date, data['content'], data['is_anonymous'])
    back_menu = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_menu')
    inline_buttons = InlineKeyboardMarkup(inline_keyboard=[[back_menu]])
    await message.answer('–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏–¥–µ—Ä—É –∏ –∫—É—Ä–∞—Ç–æ—Ä–∞–º', reply_markup=inline_buttons)
    bot = Bot(token=BOT_TOKEN)
    leader_id = get_team_leader_id(team_id)
    
    open_feedback_btn = InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ',callback_data=f'view_feedback_{feedback_id}')
    answer_feedback_btn = InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data=f'answer_feedback_{feedback_id}')
    delete_feedback_btn = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_feedback_{feedback_id}')
    inline_buttons = InlineKeyboardMarkup(inline_keyboard=[[open_feedback_btn], [answer_feedback_btn], [delete_feedback_btn]])
    await bot.send_message(
        leader_id, 
        f'üì• –ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n <pre>{data['content']}</pre>',
        parse_mode=ParseMode.HTML,
        reply_markup=inline_buttons
    )
    await bot.session.close()
    await state.clear()

@router_feedback.callback_query(F.data.startswith('delete_feedback_'))
async def delete_feedback(callback: CallbackQuery):
    feeedback_id = int(callback.data.split('_')[-1])
    back_feedback_page_btn = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='feedback_page_0')
    back_menu_btn = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='back_menu')
    inline_buttons = InlineKeyboardMarkup(inline_keyboard=[[back_feedback_page_btn], [back_menu_btn]])
    try:
        await callback.message.edit_text('‚úÖ –í—ã —É–¥–∞–ª–∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ', reply_markup=inline_buttons)
        del_feedback(feeedback_id)
    except Exception as e:
        print('ERROR: handlers/feedback_handler.delete_feedback')
        await callback.message.answer('‚ö†Ô∏è', InlineKeyboardButton)

@router_feedback.callback_query(F.data.startswith('answer_feedback_'))
async def process_answer_feedback(callback: CallbackQuery, state: FSMContext):
    feedback_id = int(callback.data.split('_')[-1])
    await state.update_data(feedback_id = feedback_id)
    await state.set_state(AnswerFeedbackStates.waiting_for_answer)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä—É –æ–±—Ä–∞—â–µ–Ω–∏—è:')
@router_feedback.message(AnswerFeedbackStates.waiting_for_answer)
async def finish_answer_feedback(message: types.Message, state: FSMContext):
    await state.update_data(answer = message.text)
    delete_feedback_btn = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', callback_data='delete_feedback_')
    back_feedbacks_btn = InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='feedback_page_0')
    inline_buttons = InlineKeyboardMarkup(inline_keyboard=[[delete_feedback_btn], [back_feedbacks_btn]])
    await message.answer('–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à –æ—Ç–≤–µ—Ç', reply_markup=inline_buttons)

    data = await state.get_data()
    feedback_data = get_feedback_data(data['feedback_id'])
    user_id = feedback_data[1]
    feedback_content = feedback_data[5]
    feedback_date = feedback_data[3]
    curator_username = get_username(feedback_data[1])
    answer = data['answer']
    bot = Bot(token=BOT_TOKEN)
    try:
        await bot.send_message(user_id, f'‚úâÔ∏è –í–∞–º –æ—Ç–≤–µ—Ç–∏–ª @{curator_username} \n–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {feedback_date} \n–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: <pre>{feedback_content}</pre> \n–û—Ç–≤–µ—Ç: <pre>{answer}</pre>', parse_mode=ParseMode.HTML)
    except Exception as e:
        print(f'ERROR: handler/feedback_handler.finish_answer_feedback: {e}')
        back_feedback = InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='feedback_page_0')
        inline_buttons = InlineKeyboardMarkup(inline_keyboard=[[back_feedback]])
        await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞', reply_markup=inline_buttons)
    finally:
        await bot.session.close()

